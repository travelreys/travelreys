// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: trips.proto

package trips

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CollabServiceClient is the client API for CollabService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollabServiceClient interface {
	Command(ctx context.Context, opts ...grpc.CallOption) (CollabService_CommandClient, error)
}

type collabServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCollabServiceClient(cc grpc.ClientConnInterface) CollabServiceClient {
	return &collabServiceClient{cc}
}

func (c *collabServiceClient) Command(ctx context.Context, opts ...grpc.CallOption) (CollabService_CommandClient, error) {
	stream, err := c.cc.NewStream(ctx, &CollabService_ServiceDesc.Streams[0], "/trips.CollabService/Command", opts...)
	if err != nil {
		return nil, err
	}
	x := &collabServiceCommandClient{stream}
	return x, nil
}

type CollabService_CommandClient interface {
	Send(*CollabRequest) error
	Recv() (*CollabResponse, error)
	grpc.ClientStream
}

type collabServiceCommandClient struct {
	grpc.ClientStream
}

func (x *collabServiceCommandClient) Send(m *CollabRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *collabServiceCommandClient) Recv() (*CollabResponse, error) {
	m := new(CollabResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CollabServiceServer is the server API for CollabService service.
// All implementations must embed UnimplementedCollabServiceServer
// for forward compatibility
type CollabServiceServer interface {
	Command(CollabService_CommandServer) error
	mustEmbedUnimplementedCollabServiceServer()
}

// UnimplementedCollabServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCollabServiceServer struct {
}

func (UnimplementedCollabServiceServer) Command(CollabService_CommandServer) error {
	return status.Errorf(codes.Unimplemented, "method Command not implemented")
}
func (UnimplementedCollabServiceServer) mustEmbedUnimplementedCollabServiceServer() {}

// UnsafeCollabServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollabServiceServer will
// result in compilation errors.
type UnsafeCollabServiceServer interface {
	mustEmbedUnimplementedCollabServiceServer()
}

func RegisterCollabServiceServer(s grpc.ServiceRegistrar, srv CollabServiceServer) {
	s.RegisterService(&CollabService_ServiceDesc, srv)
}

func _CollabService_Command_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CollabServiceServer).Command(&collabServiceCommandServer{stream})
}

type CollabService_CommandServer interface {
	Send(*CollabResponse) error
	Recv() (*CollabRequest, error)
	grpc.ServerStream
}

type collabServiceCommandServer struct {
	grpc.ServerStream
}

func (x *collabServiceCommandServer) Send(m *CollabResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *collabServiceCommandServer) Recv() (*CollabRequest, error) {
	m := new(CollabRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CollabService_ServiceDesc is the grpc.ServiceDesc for CollabService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CollabService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trips.CollabService",
	HandlerType: (*CollabServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Command",
			Handler:       _CollabService_Command_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "trips.proto",
}
