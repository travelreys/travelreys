// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: trips.proto

package trips

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TripsClient is the client API for Trips service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TripsClient interface {
	Command(ctx context.Context, opts ...grpc.CallOption) (Trips_CommandClient, error)
}

type tripsClient struct {
	cc grpc.ClientConnInterface
}

func NewTripsClient(cc grpc.ClientConnInterface) TripsClient {
	return &tripsClient{cc}
}

func (c *tripsClient) Command(ctx context.Context, opts ...grpc.CallOption) (Trips_CommandClient, error) {
	stream, err := c.cc.NewStream(ctx, &Trips_ServiceDesc.Streams[0], "/trips.Trips/Command", opts...)
	if err != nil {
		return nil, err
	}
	x := &tripsCommandClient{stream}
	return x, nil
}

type Trips_CommandClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type tripsCommandClient struct {
	grpc.ClientStream
}

func (x *tripsCommandClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tripsCommandClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TripsServer is the server API for Trips service.
// All implementations must embed UnimplementedTripsServer
// for forward compatibility
type TripsServer interface {
	Command(Trips_CommandServer) error
	mustEmbedUnimplementedTripsServer()
}

// UnimplementedTripsServer must be embedded to have forward compatible implementations.
type UnimplementedTripsServer struct {
}

func (UnimplementedTripsServer) Command(Trips_CommandServer) error {
	return status.Errorf(codes.Unimplemented, "method Command not implemented")
}
func (UnimplementedTripsServer) mustEmbedUnimplementedTripsServer() {}

// UnsafeTripsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TripsServer will
// result in compilation errors.
type UnsafeTripsServer interface {
	mustEmbedUnimplementedTripsServer()
}

func RegisterTripsServer(s grpc.ServiceRegistrar, srv TripsServer) {
	s.RegisterService(&Trips_ServiceDesc, srv)
}

func _Trips_Command_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TripsServer).Command(&tripsCommandServer{stream})
}

type Trips_CommandServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type tripsCommandServer struct {
	grpc.ServerStream
}

func (x *tripsCommandServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tripsCommandServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Trips_ServiceDesc is the grpc.ServiceDesc for Trips service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Trips_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trips.Trips",
	HandlerType: (*TripsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Command",
			Handler:       _Trips_Command_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "trips.proto",
}
